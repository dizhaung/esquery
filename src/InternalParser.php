<?php
/*
 * Generated by PEG.js 0.8.0. with php-pegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace ESQuery;

/* Usefull functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists('ESQuery\\chr_unicode')) { function chr_unicode($code) { return mb_convert_encoding('&#' . $code . ';', 'UTF-8', 'HTML-ENTITIES');} }
/* peg_regex_test - multibyte regex test */
if (!function_exists('ESQuery\\peg_regex_test')) { function peg_regex_test($pattern, $string) { if (substr($pattern, -1) == 'i') return mb_eregi(substr($pattern, 1, -2), $string); else return mb_ereg(substr($pattern, 1, -1), $string);}}

/* Syntax error exception */
if (!class_exists("ESQuery\\SyntaxError", false)){
class SyntaxError extends Exception
{
    public $expected;
    public $found;
    public $grammarOffset;
    public $grammarLine;
    public $grammarColumn;
    public $name;
    public function __construct($message, $expected, $found, $offset, $line, $column)
    {
        parent::__construct($message, 0, null);
        $this->expected = $expected;
        $this->found = $found;
        $this->grammarOffset = $offset;
        $this->grammarLine = $line;
        $this->grammarColumn = $column;
        $this->name = "SyntaxError";
    }
};}

class InternalParser{


    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = "";


    private function cleanup_state(){
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = "";

    }


    private function text() {
      return substr($this->input, $this->peg_reportedPos, $this->peg_reportedPos + $this->peg_currPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_computePosDetails($pos) {
      $self = $this;
      $advance = function(&$details, $startPos, $endPos) use($self) {
        for ($p = $startPos; $p < $endPos; $p++) {
          $ch = mb_substr($self->input, $p, 1, "UTF-8");
          if ($ch === "\n") {
            if (!$details["seenCR"]) { $details["line"]++; }
            $details["column"] = 1;
            $details["seenCR"] = false;
          } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
            $details["line"]++;
            $details["column"] = 1;
            $details["seenCR"] = true;
          } else {
            $details["column"]++;
            $details["seenCR"] = false;
          }
        }
      };

      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $advance($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException($message, $expected, $pos) {
      $cleanupExpected = function (&$expected){
        $i = 1;

        usort($expected, function($a, $b) {
          if ($a["description"] < $b["description"]) {
            return -1;
          } else if ($a["description"] > $b["description"]) {
            return 1;
          } else {
            return 0;
          }
        });

        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      };

      $buildMessage = function ($expected, $found) {
        $stringEscape = function ($s) {
          $hex = function($ch) { return strtoupper(dechex(ord($ch[0])));};

            $s = str_replace("\\",   "\\\\", $s);
            $s = str_replace("\"",    "\\\"", $s);
            $s = str_replace('\x08', '\\b', $s);
            $s = str_replace('\t',   '\\t', $s);
            $s = str_replace('\n',   '\\n', $s);
            $s = str_replace('\f',   '\\f', $s);
            $s = str_replace('\r',   '\\r', $s);
            $s = preg_replace_callback('/[\\x00-\\x07\\x0B\\x0E\\x0F]/u', function($ch) use($hex) { return '\\x0' + $hex($ch[0]); }, $s);
            $s = preg_replace_callback('/[\\x10-\\x1F\\x80-\\xFF]/u',     function($ch) use($hex) { return '\\x'  + $hex($ch[0]); }, $s);
            return $s;
        };

        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? "\"" . $stringEscape($found) . "\"" : "end of input";

        return "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      };

      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < mb_strlen($this->input, "UTF-8") ? mb_substr($this->input, $pos, 1, "UTF-8") : null;

      if ($expected !== null) {
        $cleanupExpected($expected);
      }

      return new SyntaxError(
        $message !== null ? $message : $buildMessage($expected, $found),
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;
    private $peg_c61;
    private $peg_c62;
    private $peg_c63;
    private $peg_c64;
    private $peg_c65;
    private $peg_c66;
    private $peg_c67;
    private $peg_c68;
    private $peg_c69;
    private $peg_c70;
    private $peg_c71;
    private $peg_c72;
    private $peg_c73;
    private $peg_c74;
    private $peg_c75;
    private $peg_c76;
    private $peg_c77;
    private $peg_c78;
    private $peg_c79;
    private $peg_c80;
    private $peg_c81;
    private $peg_c82;
    private $peg_c83;
    private $peg_c84;
    private $peg_c85;
    private $peg_c86;
    private $peg_c87;
    private $peg_c88;
    private $peg_c89;
    private $peg_c90;
    private $peg_c91;
    private $peg_c92;
    private $peg_c93;
    private $peg_c94;
    private $peg_c95;
    private $peg_c96;
    private $peg_c97;
    private $peg_c98;
    private $peg_c99;
    private $peg_c100;
    private $peg_c101;
    private $peg_c102;
    private $peg_c103;
    private $peg_c104;
    private $peg_c105;
    private $peg_c106;
    private $peg_c107;
    private $peg_c108;
    private $peg_c109;
    private $peg_c110;
    private $peg_c111;
    private $peg_c112;
    private $peg_c113;
    private $peg_c114;
    private $peg_c115;
    private $peg_c116;
    private $peg_c117;
    private $peg_c118;
    private $peg_c119;
    private $peg_c120;
    private $peg_c121;
    private $peg_c122;
    private $peg_c123;
    private $peg_c124;
    private $peg_c125;
    private $peg_c126;
    private $peg_c127;
    private $peg_c128;
    private $peg_c129;
    private $peg_c130;
    private $peg_c131;
    private $peg_c132;
    private $peg_c133;
    private $peg_c134;
    private $peg_c135;
    private $peg_c136;
    private $peg_c137;
    private $peg_c138;
    private $peg_c139;
    private $peg_c140;
    private $peg_c141;
    private $peg_c142;
    private $peg_c143;
    private $peg_c144;
    private $peg_c145;
    private $peg_c146;
    private $peg_c147;
    private $peg_c148;
    private $peg_c149;
    private $peg_c150;
    private $peg_c151;
    private $peg_c152;
    private $peg_c153;
    private $peg_c154;
    private $peg_c155;
    private $peg_c156;
    private $peg_c157;
    private $peg_c158;
    private $peg_c159;
    private $peg_c160;
    private $peg_c161;
    private $peg_c162;
    private $peg_c163;
    private $peg_c164;
    private $peg_c165;
    private $peg_c166;
    private $peg_c167;
    private $peg_c168;
    private $peg_c169;
    private $peg_c170;
    private $peg_c171;
    private $peg_c172;
    private $peg_c173;
    private $peg_c174;
    private $peg_c175;
    private $peg_c176;
    private $peg_c177;
    private $peg_c178;
    private $peg_c179;
    private $peg_c180;
    private $peg_c181;
    private $peg_c182;
    private $peg_c183;
    private $peg_c184;
    private $peg_c185;
    private $peg_c186;
    private $peg_c187;
    private $peg_c188;
    private $peg_c189;
    private $peg_c190;
    private $peg_c191;
    private $peg_c192;
    private $peg_c193;
    private $peg_c194;
    private $peg_c195;
    private $peg_c196;
    private $peg_c197;
    private $peg_c198;
    private $peg_c199;
    private $peg_c200;
    private $peg_c201;
    private $peg_c202;

    private function peg_parseRoot() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_c1;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_parseSettings();
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c1;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseQueryCommand();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_c2;
            $s5 = $this->peg_currPos;
            $s6 = $this->peg_parse_();
            if ($s6 === $this->peg_FAILED) {
              $s6 = $this->peg_c1;
            }
            if ($s6 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c3) {
                $s7 = $this->peg_c3;
                $this->peg_currPos++;
              } else {
                $s7 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c4); }
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_parse_();
                if ($s8 === $this->peg_FAILED) {
                  $s8 = $this->peg_c1;
                }
                if ($s8 !== $this->peg_FAILED) {
                  $s9 = $this->peg_parseTailCommand();
                  if ($s9 !== $this->peg_FAILED) {
                    $s6 = array($s6, $s7, $s8, $s9);
                    $s5 = $s6;
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s5;
              $s5 = $this->peg_c0;
            }
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c3) {
                  $s7 = $this->peg_c3;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c4); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseTailCommand();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c5,$s2, $s3, $s4);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseTailCommand() {

      $s0 = $this->peg_parseJoinCommand();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseAggCommand();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseTransactionCommand();
        }
      }

      return $s0;
    }

    private function peg_parseSettings() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseSetting();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseSetting();
          if ($s5 !== $this->peg_FAILED) {
            $s4 = array($s4, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseSetting();
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c6,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSetting() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c7) {
        $s1 = $this->peg_c7;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c8); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 10, "UTF-8") === $this->peg_c9) {
          $s3 = $this->peg_c9;
          $this->peg_currPos += 10;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c10); }
        }
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_parseSEP();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseField();
            if ($s5 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s2;
              $s3 = call_user_func($this->peg_c11,$s3, $s5);
              $s2 = $s3;
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c12) {
            $s3 = $this->peg_c12;
            $this->peg_currPos += 2;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c13); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseSEP();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseDate();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s2;
                $s3 = call_user_func($this->peg_c11,$s3, $s5);
                $s2 = $s3;
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
          if ($s2 === $this->peg_FAILED) {
            $s2 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c14) {
              $s3 = $this->peg_c14;
              $this->peg_currPos += 4;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c15); }
            }
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parseSEP();
              if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_parseDate();
                if ($s5 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s2;
                  $s3 = call_user_func($this->peg_c11,$s3, $s5);
                  $s2 = $s3;
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_c0;
            }
            if ($s2 === $this->peg_FAILED) {
              $s2 = $this->peg_currPos;
              if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c16) {
                $s3 = $this->peg_c16;
                $this->peg_currPos += 4;
              } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c17); }
              }
              if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parseSEP();
                if ($s4 !== $this->peg_FAILED) {
                  $s5 = $this->peg_parseInteger();
                  if ($s5 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s2;
                    $s3 = call_user_func($this->peg_c11,$s3, $s5);
                    $s2 = $s3;
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_c0;
              }
              if ($s2 === $this->peg_FAILED) {
                $s2 = $this->peg_currPos;
                if (mb_substr($this->input, $this->peg_currPos, 7, "UTF-8") === $this->peg_c18) {
                  $s3 = $this->peg_c18;
                  $this->peg_currPos += 7;
                } else {
                  $s3 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c19); }
                }
                if ($s3 !== $this->peg_FAILED) {
                  $s4 = $this->peg_parseSEP();
                  if ($s4 !== $this->peg_FAILED) {
                    $s5 = $this->peg_parseBoolean();
                    if ($s5 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s2;
                      $s3 = call_user_func($this->peg_c11,$s3, $s5);
                      $s2 = $s3;
                    } else {
                      $this->peg_currPos = $s2;
                      $s2 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_c0;
                }
                if ($s2 === $this->peg_FAILED) {
                  $s2 = $this->peg_currPos;
                  if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c20) {
                    $s3 = $this->peg_c20;
                    $this->peg_currPos += 4;
                  } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c21); }
                  }
                  if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parseSEP();
                    if ($s4 !== $this->peg_FAILED) {
                      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c22) {
                        $s5 = $this->peg_c22;
                        $this->peg_currPos++;
                      } else {
                        $s5 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c23); }
                      }
                      if ($s5 !== $this->peg_FAILED) {
                        $s6 = $this->peg_parseSortsSetting();
                        if ($s6 !== $this->peg_FAILED) {
                          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c24) {
                            $s7 = $this->peg_c24;
                            $this->peg_currPos++;
                          } else {
                            $s7 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c25); }
                          }
                          if ($s7 !== $this->peg_FAILED) {
                            $this->peg_reportedPos = $s2;
                            $s3 = call_user_func($this->peg_c11,$s3, $s6);
                            $s2 = $s3;
                          } else {
                            $this->peg_currPos = $s2;
                            $s2 = $this->peg_c0;
                          }
                        } else {
                          $this->peg_currPos = $s2;
                          $s2 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s2;
                      $s2 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_c0;
                  }
                  if ($s2 === $this->peg_FAILED) {
                    $s2 = $this->peg_currPos;
                    if (mb_substr($this->input, $this->peg_currPos, 6, "UTF-8") === $this->peg_c26) {
                      $s3 = $this->peg_c26;
                      $this->peg_currPos += 6;
                    } else {
                      $s3 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c27); }
                    }
                    if ($s3 !== $this->peg_FAILED) {
                      $s4 = $this->peg_parseSEP();
                      if ($s4 !== $this->peg_FAILED) {
                        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c22) {
                          $s5 = $this->peg_c22;
                          $this->peg_currPos++;
                        } else {
                          $s5 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c23); }
                        }
                        if ($s5 !== $this->peg_FAILED) {
                          $s6 = $this->peg_parseField();
                          if ($s6 !== $this->peg_FAILED) {
                            $s7 = $this->peg_c2;
                            $s8 = $this->peg_currPos;
                            $s9 = $this->peg_parse_();
                            if ($s9 !== $this->peg_FAILED) {
                              $s10 = $this->peg_parseField();
                              if ($s10 !== $this->peg_FAILED) {
                                $s9 = array($s9, $s10);
                                $s8 = $s9;
                              } else {
                                $this->peg_currPos = $s8;
                                $s8 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s8;
                              $s8 = $this->peg_c0;
                            }
                            while ($s8 !== $this->peg_FAILED) {
                              $s7[] = $s8;
                              $s8 = $this->peg_currPos;
                              $s9 = $this->peg_parse_();
                              if ($s9 !== $this->peg_FAILED) {
                                $s10 = $this->peg_parseField();
                                if ($s10 !== $this->peg_FAILED) {
                                  $s9 = array($s9, $s10);
                                  $s8 = $s9;
                                } else {
                                  $this->peg_currPos = $s8;
                                  $s8 = $this->peg_c0;
                                }
                              } else {
                                $this->peg_currPos = $s8;
                                $s8 = $this->peg_c0;
                              }
                            }
                            if ($s7 !== $this->peg_FAILED) {
                              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c24) {
                                $s8 = $this->peg_c24;
                                $this->peg_currPos++;
                              } else {
                                $s8 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c25); }
                              }
                              if ($s8 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s2;
                                $s3 = call_user_func($this->peg_c28,$s3, $s6, $s7);
                                $s2 = $s3;
                              } else {
                                $this->peg_currPos = $s2;
                                $s2 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s2;
                              $s2 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s2;
                            $s2 = $this->peg_c0;
                          }
                        } else {
                          $this->peg_currPos = $s2;
                          $s2 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s2;
                      $s2 = $this->peg_c0;
                    }
                    if ($s2 === $this->peg_FAILED) {
                      $s2 = $this->peg_currPos;
                      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c29) {
                        $s3 = $this->peg_c29;
                        $this->peg_currPos += 3;
                      } else {
                        $s3 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c30); }
                      }
                      if ($s3 !== $this->peg_FAILED) {
                        $s4 = $this->peg_parseSEP();
                        if ($s4 !== $this->peg_FAILED) {
                          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c22) {
                            $s5 = $this->peg_c22;
                            $this->peg_currPos++;
                          } else {
                            $s5 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c23); }
                          }
                          if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_parseMapSetting();
                            if ($s6 !== $this->peg_FAILED) {
                              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c24) {
                                $s7 = $this->peg_c24;
                                $this->peg_currPos++;
                              } else {
                                $s7 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c25); }
                              }
                              if ($s7 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s2;
                                $s3 = call_user_func($this->peg_c11,$s3, $s6);
                                $s2 = $s3;
                              } else {
                                $this->peg_currPos = $s2;
                                $s2 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s2;
                              $s2 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s2;
                            $s2 = $this->peg_c0;
                          }
                        } else {
                          $this->peg_currPos = $s2;
                          $s2 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_c0;
                      }
                      if ($s2 === $this->peg_FAILED) {
                        $s2 = $this->peg_c2;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c31,$s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseMapSetting() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_c1;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseFieldMap();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c2;
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_parse_();
          if ($s5 === $this->peg_FAILED) {
            $s5 = $this->peg_c1;
          }
          if ($s5 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c32) {
              $s6 = $this->peg_c32;
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c33); }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parse_();
              if ($s7 === $this->peg_FAILED) {
                $s7 = $this->peg_c1;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_parseFieldMap();
                if ($s8 !== $this->peg_FAILED) {
                  $s5 = array($s5, $s6, $s7, $s8);
                  $s4 = $s5;
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c0;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 === $this->peg_FAILED) {
              $s5 = $this->peg_c1;
            }
            if ($s5 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c32) {
                $s6 = $this->peg_c32;
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c33); }
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parse_();
                if ($s7 === $this->peg_FAILED) {
                  $s7 = $this->peg_c1;
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parseFieldMap();
                  if ($s8 !== $this->peg_FAILED) {
                    $s5 = array($s5, $s6, $s7, $s8);
                    $s4 = $s5;
                  } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c34,$s2, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseFieldMap() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseField();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_parseSEP();
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_parseField();
          if ($s4 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c35,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSortsSetting() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_c1;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseFieldSort();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c2;
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_parse_();
          if ($s5 === $this->peg_FAILED) {
            $s5 = $this->peg_c1;
          }
          if ($s5 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c32) {
              $s6 = $this->peg_c32;
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c33); }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parse_();
              if ($s7 === $this->peg_FAILED) {
                $s7 = $this->peg_c1;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_parseFieldSort();
                if ($s8 !== $this->peg_FAILED) {
                  $s5 = array($s5, $s6, $s7, $s8);
                  $s4 = $s5;
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c0;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 === $this->peg_FAILED) {
              $s5 = $this->peg_c1;
            }
            if ($s5 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c32) {
                $s6 = $this->peg_c32;
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c33); }
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parse_();
                if ($s7 === $this->peg_FAILED) {
                  $s7 = $this->peg_c1;
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parseFieldSort();
                  if ($s8 !== $this->peg_FAILED) {
                    $s5 = array($s5, $s6, $s7, $s8);
                    $s4 = $s5;
                  } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c36,$s2, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseFieldSort() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseField();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_parseSEP();
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_parseOrder();
          if ($s4 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c1;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c37,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseDate() {

      $s0 = $this->peg_parseInteger();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_c2;
        if (peg_regex_test($this->peg_c38, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c39); }
        }
        if ($s2 !== $this->peg_FAILED) {
          while ($s2 !== $this->peg_FAILED) {
            $s1[] = $s2;
            if (peg_regex_test($this->peg_c38, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s2 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c39); }
            }
          }
        } else {
          $s1 = $this->peg_c0;
        }
        if ($s1 !== $this->peg_FAILED) {
          $s1 = mb_substr($this->input, $s0, $this->peg_currPos - $s0, "UTF-8");
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseOrder() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c40) {
        $s1 = $this->peg_c40;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c41); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c42);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c43) {
          $s1 = $this->peg_c43;
          $this->peg_currPos += 4;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c44); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c45);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseSEP() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c46) {
        $s0 = $this->peg_c46;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c47); }
      }

      return $s0;
    }

    private function peg_parse_() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseWhitespace();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_c1;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseComment();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseWhitespace();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_c1;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseWhitespace();
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c48); }
      }

      return $s0;
    }

    private function peg_parseComment() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c49) {
        $s1 = $this->peg_c49;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c50); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        if (peg_regex_test($this->peg_c51, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c52); }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c51, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c52); }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseWhitespace() {

      $s0 = $this->peg_c2;
      $s1 = $this->peg_parseWhitespaceChar();
      if ($s1 !== $this->peg_FAILED) {
        while ($s1 !== $this->peg_FAILED) {
          $s0[] = $s1;
          $s1 = $this->peg_parseWhitespaceChar();
        }
      } else {
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseWhitespaceChar() {

      if (peg_regex_test($this->peg_c53, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c54); }
      }

      return $s0;
    }

    private function peg_parseField() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      if (peg_regex_test($this->peg_c55, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c56); }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c55, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c56); }
          }
        }
      } else {
        $s1 = $this->peg_c0;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s1 = mb_substr($this->input, $s0, $this->peg_currPos - $s0, "UTF-8");
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseValue() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      if (peg_regex_test($this->peg_c55, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c56); }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c55, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c56); }
          }
        }
      } else {
        $s1 = $this->peg_c0;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s1 = mb_substr($this->input, $s0, $this->peg_currPos - $s0, "UTF-8");
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseBoolean() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c57) {
        $s1 = $this->peg_c57;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c58); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c59);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c60) {
          $s1 = $this->peg_c60;
          $this->peg_currPos += 5;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c61); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c62);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseInteger() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      if (peg_regex_test($this->peg_c63, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c64); }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c63, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c64); }
          }
        }
      } else {
        $s1 = $this->peg_c0;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c65,$s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseWildCardValue() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c66) {
        $s1 = $this->peg_c66;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c67); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_parseDoubleQuotedChar();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseDoubleQuotedChar();
        }
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c66) {
            $s3 = $this->peg_c66;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c67); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c68,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c69) {
          $s1 = $this->peg_c69;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c70); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_c2;
          $s3 = $this->peg_parseSingleQuotedChar();
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parseSingleQuotedChar();
          }
          if ($s2 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c69) {
              $s3 = $this->peg_c69;
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c70); }
            }
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c68,$s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = $this->peg_currPos;
          $this->peg_silentFails++;
          if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c71) {
            $s2 = $this->peg_c71;
            $this->peg_currPos += 3;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c72); }
          }
          $this->peg_silentFails--;
          if ($s2 === $this->peg_FAILED) {
            $s1 = $this->peg_c1;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_c0;
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_currPos;
            $this->peg_silentFails++;
            if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c73) {
              $s3 = $this->peg_c73;
              $this->peg_currPos += 3;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c74); }
            }
            $this->peg_silentFails--;
            if ($s3 === $this->peg_FAILED) {
              $s2 = $this->peg_c1;
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_c0;
            }
            if ($s2 !== $this->peg_FAILED) {
              $s3 = $this->peg_currPos;
              $this->peg_silentFails++;
              if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c75) {
                $s4 = $this->peg_c75;
                $this->peg_currPos += 2;
              } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c76); }
              }
              $this->peg_silentFails--;
              if ($s4 === $this->peg_FAILED) {
                $s3 = $this->peg_c1;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
              if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_c2;
                $s5 = $this->peg_parseWildCardChunk();
                if ($s5 !== $this->peg_FAILED) {
                  while ($s5 !== $this->peg_FAILED) {
                    $s4[] = $s5;
                    $s5 = $this->peg_parseWildCardChunk();
                  }
                } else {
                  $s4 = $this->peg_c0;
                }
                if ($s4 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c77,$s4);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        }
      }

      return $s0;
    }

    private function peg_parseWildCardChunk() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c78) {
        $s1 = $this->peg_c78;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c79); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c80);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c81) {
          $s1 = $this->peg_c81;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c82); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c83);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = $this->peg_c2;
          $s2 = $this->peg_parseEscapedChar();
          if ($s2 !== $this->peg_FAILED) {
            while ($s2 !== $this->peg_FAILED) {
              $s1[] = $s2;
              $s2 = $this->peg_parseEscapedChar();
            }
          } else {
            $s1 = $this->peg_c0;
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c84,$s1);
          }
          $s0 = $s1;
        }
      }

      return $s0;
    }

    private function peg_parseEscapedChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c85) {
        $s1 = $this->peg_c85;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c86); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseMetaChar();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c87,$s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseSpecialChar();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s2 = $this->peg_parseMetaChar();
          $this->peg_silentFails--;
          if ($s2 === $this->peg_FAILED) {
            $s1 = $this->peg_c1;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_c0;
          }
          if ($s1 !== $this->peg_FAILED) {
            if (mb_strlen($this->input, "UTF-8") > $this->peg_currPos) {
              $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s2 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c88); }
            }
            if ($s2 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c87,$s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        }
      }

      return $s0;
    }

    private function peg_parseLiteralValue() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c66) {
        $s1 = $this->peg_c66;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c67); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_parseDoubleQuotedChar();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseDoubleQuotedChar();
        }
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c66) {
            $s3 = $this->peg_c66;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c67); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c84,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c69) {
          $s1 = $this->peg_c69;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c70); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_c2;
          $s3 = $this->peg_parseSingleQuotedChar();
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parseSingleQuotedChar();
          }
          if ($s2 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c69) {
              $s3 = $this->peg_c69;
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c70); }
            }
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c84,$s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = $this->peg_c2;
          $s2 = $this->peg_parseEscapedChar();
          if ($s2 !== $this->peg_FAILED) {
            while ($s2 !== $this->peg_FAILED) {
              $s1[] = $s2;
              $s2 = $this->peg_parseEscapedChar();
            }
          } else {
            $s1 = $this->peg_c0;
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c84,$s1);
          }
          $s0 = $s1;
        }
      }

      return $s0;
    }

    private function peg_parseDoubleQuotedChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c89) {
        $s1 = $this->peg_c89;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c90); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c91);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseSpecialChar();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c85) {
            $s1 = $this->peg_c85;
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c86); }
          }
          if ($s1 === $this->peg_FAILED) {
            $s1 = $this->peg_c1;
          }
          if ($s1 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c92, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s2 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c93); }
            }
            if ($s2 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c87,$s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        }
      }

      return $s0;
    }

    private function peg_parseSingleQuotedChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c94) {
        $s1 = $this->peg_c94;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c95); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c96);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (peg_regex_test($this->peg_c97, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s1 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c98); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c87,$s1);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseMetaChar() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseWhitespaceChar();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c99,$s1);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
          $s0 = $this->peg_c100;
          $this->peg_currPos++;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
        }
        if ($s0 === $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c102) {
            $s0 = $this->peg_c102;
            $this->peg_currPos++;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c103); }
          }
          if ($s0 === $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c104) {
              $s0 = $this->peg_c104;
              $this->peg_currPos++;
            } else {
              $s0 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c105); }
            }
            if ($s0 === $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c106) {
                $s0 = $this->peg_c106;
                $this->peg_currPos++;
              } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c107); }
              }
              if ($s0 === $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c22) {
                  $s0 = $this->peg_c22;
                  $this->peg_currPos++;
                } else {
                  $s0 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c23); }
                }
                if ($s0 === $this->peg_FAILED) {
                  if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c24) {
                    $s0 = $this->peg_c24;
                    $this->peg_currPos++;
                  } else {
                    $s0 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c25); }
                  }
                  if ($s0 === $this->peg_FAILED) {
                    if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c108) {
                      $s0 = $this->peg_c108;
                      $this->peg_currPos++;
                    } else {
                      $s0 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c109); }
                    }
                    if ($s0 === $this->peg_FAILED) {
                      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c110) {
                        $s0 = $this->peg_c110;
                        $this->peg_currPos++;
                      } else {
                        $s0 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c111); }
                      }
                      if ($s0 === $this->peg_FAILED) {
                        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c46) {
                          $s0 = $this->peg_c46;
                          $this->peg_currPos++;
                        } else {
                          $s0 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c47); }
                        }
                        if ($s0 === $this->peg_FAILED) {
                          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c85) {
                            $s0 = $this->peg_c85;
                            $this->peg_currPos++;
                          } else {
                            $s0 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c86); }
                          }
                          if ($s0 === $this->peg_FAILED) {
                            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c112) {
                              $s0 = $this->peg_c112;
                              $this->peg_currPos++;
                            } else {
                              $s0 = $this->peg_FAILED;
                              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c113); }
                            }
                            if ($s0 === $this->peg_FAILED) {
                              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c114) {
                                $s0 = $this->peg_c114;
                                $this->peg_currPos++;
                              } else {
                                $s0 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c115); }
                              }
                              if ($s0 === $this->peg_FAILED) {
                                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c116) {
                                  $s0 = $this->peg_c116;
                                  $this->peg_currPos++;
                                } else {
                                  $s0 = $this->peg_FAILED;
                                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c117); }
                                }
                                if ($s0 === $this->peg_FAILED) {
                                  if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c3) {
                                    $s0 = $this->peg_c3;
                                    $this->peg_currPos++;
                                  } else {
                                    $s0 = $this->peg_FAILED;
                                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c4); }
                                  }
                                  if ($s0 === $this->peg_FAILED) {
                                    if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c66) {
                                      $s0 = $this->peg_c66;
                                      $this->peg_currPos++;
                                    } else {
                                      $s0 = $this->peg_FAILED;
                                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c67); }
                                    }
                                    if ($s0 === $this->peg_FAILED) {
                                      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c69) {
                                        $s0 = $this->peg_c69;
                                        $this->peg_currPos++;
                                      } else {
                                        $s0 = $this->peg_FAILED;
                                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c70); }
                                      }
                                      if ($s0 === $this->peg_FAILED) {
                                        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c78) {
                                          $s0 = $this->peg_c78;
                                          $this->peg_currPos++;
                                        } else {
                                          $s0 = $this->peg_FAILED;
                                          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c79); }
                                        }
                                        if ($s0 === $this->peg_FAILED) {
                                          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c81) {
                                            $s0 = $this->peg_c81;
                                            $this->peg_currPos++;
                                          } else {
                                            $s0 = $this->peg_FAILED;
                                            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c82); }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseSpecialChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c118) {
        $s1 = $this->peg_c118;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c119); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c120);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c121) {
          $s1 = $this->peg_c121;
          $this->peg_currPos += 2;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c122); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c123);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c124) {
            $s1 = $this->peg_c124;
            $this->peg_currPos += 2;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c125); }
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c126);
          }
          $s0 = $s1;
        }
      }

      return $s0;
    }

    private function peg_parseQueryCommand() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseQueryOR();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c127,$s1);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c78) {
          $s1 = $this->peg_c78;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c79); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c128);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseQueryOR() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseQueryAND();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c75) {
            $s5 = $this->peg_c75;
            $this->peg_currPos += 2;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c76); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseQueryAND();
              if ($s7 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c75) {
              $s5 = $this->peg_c75;
              $this->peg_currPos += 2;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c76); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseQueryAND();
                if ($s7 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c129,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseQueryAND() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseQueryNOT();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_currPos;
        $s5 = $this->peg_parse_();
        if ($s5 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c73) {
            $s6 = $this->peg_c73;
            $this->peg_currPos += 3;
          } else {
            $s6 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c74); }
          }
          if ($s6 !== $this->peg_FAILED) {
            $s5 = array($s5, $s6);
            $s4 = $s5;
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_c0;
        }
        if ($s4 === $this->peg_FAILED) {
          $s4 = $this->peg_c1;
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parse_();
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parseQueryNOT();
            if ($s6 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5, $s6);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_parse_();
          if ($s5 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c73) {
              $s6 = $this->peg_c73;
              $this->peg_currPos += 3;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c74); }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s5 = array($s5, $s6);
              $s4 = $s5;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c0;
          }
          if ($s4 === $this->peg_FAILED) {
            $s4 = $this->peg_c1;
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseQueryNOT();
              if ($s6 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c130,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseQueryNOT() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseQueryUnaryNOT();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c73) {
            $s5 = $this->peg_c73;
            $this->peg_currPos += 3;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c74); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s4 = array($s4, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        if ($s3 === $this->peg_FAILED) {
          $s3 = $this->peg_c1;
        }
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c71) {
              $s5 = $this->peg_c71;
              $this->peg_currPos += 3;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c72); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseQueryUnaryNOT();
                if ($s7 !== $this->peg_FAILED) {
                  $s3 = array($s3, $s4, $s5, $s6, $s7);
                  $s2 = $s3;
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c1;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c131,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseQueryUnaryNOT() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c110) {
        $s1 = $this->peg_c110;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c111); }
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_c1;
      }
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
          $s2 = $this->peg_c100;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_c1;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseQueryOR();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c102) {
                  $s6 = $this->peg_c102;
                  $this->peg_currPos++;
                } else {
                  $s6 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c103); }
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c132,$s1, $s4);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c110) {
          $s1 = $this->peg_c110;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c111); }
        }
        if ($s1 === $this->peg_FAILED) {
          $s1 = $this->peg_c1;
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseQueryClause();
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c133,$s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      }

      return $s0;
    }

    private function peg_parseQueryClause() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 8, "UTF-8") === $this->peg_c134) {
        $s1 = $this->peg_c134;
        $this->peg_currPos += 8;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c135); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSEP();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parseField();
          if ($s4 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s3;
            $s4 = call_user_func($this->peg_c136,$s4);
          }
          $s3 = $s4;
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_currPos;
            $s4 = $this->peg_c2;
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s3;
              $s4 = call_user_func($this->peg_c137);
            }
            $s3 = $s4;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c31,$s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 9, "UTF-8") === $this->peg_c138) {
          $s1 = $this->peg_c138;
          $this->peg_currPos += 9;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c139); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseSEP();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_currPos;
            $s4 = $this->peg_parseField();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s3;
              $s4 = call_user_func($this->peg_c140,$s4);
            }
            $s3 = $s4;
            if ($s3 === $this->peg_FAILED) {
              $s3 = $this->peg_currPos;
              $s4 = $this->peg_c2;
              if ($s4 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s3;
                $s4 = call_user_func($this->peg_c137);
              }
              $s3 = $s4;
            }
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c31,$s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = $this->peg_parseField();
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseSEP();
            if ($s2 !== $this->peg_FAILED) {
              $s3 = $this->peg_parseQueryRangeLow();
              if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parse_();
                if ($s4 === $this->peg_FAILED) {
                  $s4 = $this->peg_c1;
                }
                if ($s4 !== $this->peg_FAILED) {
                  $s5 = $this->peg_currPos;
                  $s6 = $this->peg_parseQueryRangeValue();
                  if ($s6 !== $this->peg_FAILED) {
                    $s7 = $this->peg_parse_();
                    if ($s7 !== $this->peg_FAILED) {
                      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c141) {
                        $s8 = $this->peg_c141;
                        $this->peg_currPos += 2;
                      } else {
                        $s8 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c142); }
                      }
                      if ($s8 !== $this->peg_FAILED) {
                        $s9 = $this->peg_parse_();
                        if ($s9 !== $this->peg_FAILED) {
                          $s10 = $this->peg_parseQueryRangeValue();
                          if ($s10 !== $this->peg_FAILED) {
                            $s11 = $this->peg_parse_();
                            if ($s11 === $this->peg_FAILED) {
                              $s11 = $this->peg_c1;
                            }
                            if ($s11 !== $this->peg_FAILED) {
                              $s12 = $this->peg_parseQueryRangeHigh();
                              if ($s12 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s5;
                                $s6 = call_user_func($this->peg_c143,$s6, $s10, $s12);
                                $s5 = $s6;
                              } else {
                                $this->peg_currPos = $s5;
                                $s5 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s5;
                              $s5 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s5;
                            $s5 = $this->peg_c0;
                          }
                        } else {
                          $this->peg_currPos = $s5;
                          $s5 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s5;
                        $s5 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                  if ($s5 === $this->peg_FAILED) {
                    $s5 = $this->peg_currPos;
                    $s6 = $this->peg_c2;
                    if ($s6 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s5;
                      $s6 = call_user_func($this->peg_c144);
                    }
                    $s5 = $s6;
                  }
                  if ($s5 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = call_user_func($this->peg_c145,$s1, $s3, $s5);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parseField();
            if ($s1 !== $this->peg_FAILED) {
              $s2 = $this->peg_parseSEP();
              if ($s2 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c116) {
                  $s3 = $this->peg_c116;
                  $this->peg_currPos++;
                } else {
                  $s3 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c117); }
                }
                if ($s3 !== $this->peg_FAILED) {
                  $s4 = $this->peg_currPos;
                  $s5 = $this->peg_parseLiteralValue();
                  if ($s5 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s4;
                    $s5 = call_user_func($this->peg_c146,$s5);
                  }
                  $s4 = $s5;
                  if ($s4 === $this->peg_FAILED) {
                    $s4 = $this->peg_currPos;
                    $s5 = $this->peg_c2;
                    if ($s5 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s4;
                      $s5 = call_user_func($this->peg_c147);
                    }
                    $s4 = $s5;
                  }
                  if ($s4 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = call_user_func($this->peg_c148,$s1, $s4);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_currPos;
              $s1 = $this->peg_parseField();
              if ($s1 !== $this->peg_FAILED) {
                $s2 = $this->peg_parseSEP();
                if ($s2 !== $this->peg_FAILED) {
                  if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c112) {
                    $s3 = $this->peg_c112;
                    $this->peg_currPos++;
                  } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c113); }
                  }
                  if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_currPos;
                    $s5 = $this->peg_parseRegexValue();
                    if ($s5 !== $this->peg_FAILED) {
                      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c112) {
                        $s6 = $this->peg_c112;
                        $this->peg_currPos++;
                      } else {
                        $s6 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c113); }
                      }
                      if ($s6 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s4;
                        $s5 = call_user_func($this->peg_c149,$s5);
                        $s4 = $s5;
                      } else {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s4;
                      $s4 = $this->peg_c0;
                    }
                    if ($s4 === $this->peg_FAILED) {
                      $s4 = $this->peg_currPos;
                      $s5 = $this->peg_c2;
                      if ($s5 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s4;
                        $s5 = call_user_func($this->peg_c150);
                      }
                      $s4 = $s5;
                    }
                    if ($s4 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = call_user_func($this->peg_c151,$s1, $s4);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = $this->peg_parseField();
                if ($s1 !== $this->peg_FAILED) {
                  $s2 = $this->peg_parseSEP();
                  if ($s2 !== $this->peg_FAILED) {
                    if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                      $s3 = $this->peg_c100;
                      $this->peg_currPos++;
                    } else {
                      $s3 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                    }
                    if ($s3 !== $this->peg_FAILED) {
                      $s4 = $this->peg_currPos;
                      $s5 = $this->peg_parse_();
                      if ($s5 === $this->peg_FAILED) {
                        $s5 = $this->peg_c1;
                      }
                      if ($s5 !== $this->peg_FAILED) {
                        $s6 = $this->peg_parseWildCardValue();
                        if ($s6 !== $this->peg_FAILED) {
                          $s7 = $this->peg_c2;
                          $s8 = $this->peg_currPos;
                          $s9 = $this->peg_currPos;
                          $s10 = $this->peg_parse_();
                          if ($s10 !== $this->peg_FAILED) {
                            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c75) {
                              $s11 = $this->peg_c75;
                              $this->peg_currPos += 2;
                            } else {
                              $s11 = $this->peg_FAILED;
                              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c76); }
                            }
                            if ($s11 !== $this->peg_FAILED) {
                              $s10 = array($s10, $s11);
                              $s9 = $s10;
                            } else {
                              $this->peg_currPos = $s9;
                              $s9 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s9;
                            $s9 = $this->peg_c0;
                          }
                          if ($s9 === $this->peg_FAILED) {
                            $s9 = $this->peg_c1;
                          }
                          if ($s9 !== $this->peg_FAILED) {
                            $s10 = $this->peg_parse_();
                            if ($s10 !== $this->peg_FAILED) {
                              $s11 = $this->peg_parseWildCardValue();
                              if ($s11 !== $this->peg_FAILED) {
                                $s9 = array($s9, $s10, $s11);
                                $s8 = $s9;
                              } else {
                                $this->peg_currPos = $s8;
                                $s8 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s8;
                              $s8 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s8;
                            $s8 = $this->peg_c0;
                          }
                          while ($s8 !== $this->peg_FAILED) {
                            $s7[] = $s8;
                            $s8 = $this->peg_currPos;
                            $s9 = $this->peg_currPos;
                            $s10 = $this->peg_parse_();
                            if ($s10 !== $this->peg_FAILED) {
                              if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c75) {
                                $s11 = $this->peg_c75;
                                $this->peg_currPos += 2;
                              } else {
                                $s11 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c76); }
                              }
                              if ($s11 !== $this->peg_FAILED) {
                                $s10 = array($s10, $s11);
                                $s9 = $s10;
                              } else {
                                $this->peg_currPos = $s9;
                                $s9 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s9;
                              $s9 = $this->peg_c0;
                            }
                            if ($s9 === $this->peg_FAILED) {
                              $s9 = $this->peg_c1;
                            }
                            if ($s9 !== $this->peg_FAILED) {
                              $s10 = $this->peg_parse_();
                              if ($s10 !== $this->peg_FAILED) {
                                $s11 = $this->peg_parseWildCardValue();
                                if ($s11 !== $this->peg_FAILED) {
                                  $s9 = array($s9, $s10, $s11);
                                  $s8 = $s9;
                                } else {
                                  $this->peg_currPos = $s8;
                                  $s8 = $this->peg_c0;
                                }
                              } else {
                                $this->peg_currPos = $s8;
                                $s8 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s8;
                              $s8 = $this->peg_c0;
                            }
                          }
                          if ($s7 !== $this->peg_FAILED) {
                            $s8 = $this->peg_parse_();
                            if ($s8 === $this->peg_FAILED) {
                              $s8 = $this->peg_c1;
                            }
                            if ($s8 !== $this->peg_FAILED) {
                              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c102) {
                                $s9 = $this->peg_c102;
                                $this->peg_currPos++;
                              } else {
                                $s9 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c103); }
                              }
                              if ($s9 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s4;
                                $s5 = call_user_func($this->peg_c152,$s6, $s7);
                                $s4 = $s5;
                              } else {
                                $this->peg_currPos = $s4;
                                $s4 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s4;
                              $s4 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s4;
                            $s4 = $this->peg_c0;
                          }
                        } else {
                          $this->peg_currPos = $s4;
                          $s4 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_c0;
                      }
                      if ($s4 === $this->peg_FAILED) {
                        $s4 = $this->peg_currPos;
                        $s5 = $this->peg_c2;
                        if ($s5 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s4;
                          $s5 = call_user_func($this->peg_c153);
                        }
                        $s4 = $s5;
                      }
                      if ($s4 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = call_user_func($this->peg_c154,$s1, $s4);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_currPos;
                  $s1 = $this->peg_parseField();
                  if ($s1 !== $this->peg_FAILED) {
                    $s2 = $this->peg_parseSEP();
                    if ($s2 !== $this->peg_FAILED) {
                      $s3 = $this->peg_currPos;
                      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c114) {
                        $s4 = $this->peg_c114;
                        $this->peg_currPos++;
                      } else {
                        $s4 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c115); }
                      }
                      if ($s4 !== $this->peg_FAILED) {
                        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c114) {
                          $s5 = $this->peg_c114;
                          $this->peg_currPos++;
                        } else {
                          $s5 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c115); }
                        }
                        if ($s5 === $this->peg_FAILED) {
                          $s5 = $this->peg_c1;
                        }
                        if ($s5 !== $this->peg_FAILED) {
                          $s4 = array($s4, $s5);
                          $s3 = $s4;
                        } else {
                          $this->peg_currPos = $s3;
                          $s3 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s3;
                        $s3 = $this->peg_c0;
                      }
                      if ($s3 !== $this->peg_FAILED) {
                        $s4 = $this->peg_currPos;
                        $s5 = $this->peg_parseField();
                        if ($s5 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s4;
                          $s5 = call_user_func($this->peg_c155,$s5);
                        }
                        $s4 = $s5;
                        if ($s4 === $this->peg_FAILED) {
                          $s4 = $this->peg_currPos;
                          $s5 = $this->peg_c2;
                          if ($s5 !== $this->peg_FAILED) {
                            $this->peg_reportedPos = $s4;
                            $s5 = call_user_func($this->peg_c156);
                          }
                          $s4 = $s5;
                        }
                        if ($s4 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s0;
                          $s1 = call_user_func($this->peg_c157,$s1, $s3, $s4);
                          $s0 = $s1;
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                  if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_currPos;
                    $s1 = $this->peg_parseField();
                    if ($s1 !== $this->peg_FAILED) {
                      $s2 = $this->peg_parseSEP();
                      if ($s2 !== $this->peg_FAILED) {
                        $s3 = $this->peg_parseWildCardValue();
                        if ($s3 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s0;
                          $s1 = call_user_func($this->peg_c158,$s1, $s3);
                          $s0 = $s1;
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                    if ($s0 === $this->peg_FAILED) {
                      $s0 = $this->peg_currPos;
                      $s1 = $this->peg_parseWildCardValue();
                      if ($s1 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = call_user_func($this->peg_c159,$s1);
                      }
                      $s0 = $s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseRegexValue() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      $s2 = $this->peg_parseRegexChar();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseRegexChar();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c84,$s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseRegexChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c160) {
        $s1 = $this->peg_c160;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c161); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c162);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        if (peg_regex_test($this->peg_c163, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c164); }
        }
      }

      return $s0;
    }

    private function peg_parseQueryRangeLow() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c22) {
        $s0 = $this->peg_c22;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c23); }
      }
      if ($s0 === $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c104) {
          $s0 = $this->peg_c104;
          $this->peg_currPos++;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c105); }
        }
      }

      return $s0;
    }

    private function peg_parseQueryRangeHigh() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c24) {
        $s0 = $this->peg_c24;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c25); }
      }
      if ($s0 === $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c106) {
          $s0 = $this->peg_c106;
          $this->peg_currPos++;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c107); }
        }
      }

      return $s0;
    }

    private function peg_parseQueryRangeValue() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c78) {
        $s1 = $this->peg_c78;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c79); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c165);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseLiteralValue();
      }

      return $s0;
    }

    private function peg_parseJoinCommand() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c166) {
        $s1 = $this->peg_c166;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c167); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 12, "UTF-8") === $this->peg_c168) {
            $s3 = $this->peg_c168;
            $this->peg_currPos += 12;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c169); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseSEP();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseField();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  if (mb_substr($this->input, $this->peg_currPos, 12, "UTF-8") === $this->peg_c170) {
                    $s7 = $this->peg_c170;
                    $this->peg_currPos += 12;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c171); }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parseSEP();
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parseField();
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_currPos;
                        $s11 = $this->peg_parse_();
                        if ($s11 !== $this->peg_FAILED) {
                          $s12 = $this->peg_parseQueryOR();
                          if ($s12 !== $this->peg_FAILED) {
                            $s11 = array($s11, $s12);
                            $s10 = $s11;
                          } else {
                            $this->peg_currPos = $s10;
                            $s10 = $this->peg_c0;
                          }
                        } else {
                          $this->peg_currPos = $s10;
                          $s10 = $this->peg_c0;
                        }
                        if ($s10 === $this->peg_FAILED) {
                          $s10 = $this->peg_c1;
                        }
                        if ($s10 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s0;
                          $s1 = call_user_func($this->peg_c172,$s5, $s9, $s10);
                          $s0 = $s1;
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseAggCommand() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c173) {
        $s1 = $this->peg_c173;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c174); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSEP();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseAggType();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c175) {
                $s5 = $this->peg_c175;
                $this->peg_currPos += 5;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c176); }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseSEP();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseField();
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_currPos;
                    $s9 = $this->peg_parse_();
                    if ($s9 !== $this->peg_FAILED) {
                      $s10 = $this->peg_parseAggSettings();
                      if ($s10 !== $this->peg_FAILED) {
                        $s9 = array($s9, $s10);
                        $s8 = $s9;
                      } else {
                        $this->peg_currPos = $s8;
                        $s8 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_c0;
                    }
                    if ($s8 === $this->peg_FAILED) {
                      $s8 = $this->peg_c1;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = call_user_func($this->peg_c177,$s3, $s7, $s8);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseAggType() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c178) {
        $s1 = $this->peg_c178;
        $this->peg_currPos += 5;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c179); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c180);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 8, "UTF-8") === $this->peg_c181) {
          $s1 = $this->peg_c181;
          $this->peg_currPos += 8;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c182); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c183);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c184) {
            $s1 = $this->peg_c184;
            $this->peg_currPos += 4;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c185); }
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c186);
          }
          $s0 = $s1;
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c187) {
              $s1 = $this->peg_c187;
              $this->peg_currPos += 3;
            } else {
              $s1 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c188); }
            }
            if ($s1 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c189);
            }
            $s0 = $s1;
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_currPos;
              if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c190) {
                $s1 = $this->peg_c190;
                $this->peg_currPos += 3;
              } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c191); }
              }
              if ($s1 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c192);
              }
              $s0 = $s1;
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c193) {
                  $s1 = $this->peg_c193;
                  $this->peg_currPos += 3;
                } else {
                  $s1 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c194); }
                }
                if ($s1 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c195);
                }
                $s0 = $s1;
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_currPos;
                  if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c196) {
                    $s1 = $this->peg_c196;
                    $this->peg_currPos += 3;
                  } else {
                    $s1 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c197); }
                  }
                  if ($s1 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = call_user_func($this->peg_c198);
                  }
                  $s0 = $s1;
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseAggSettings() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseAggSetting();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseAggSetting();
          if ($s5 !== $this->peg_FAILED) {
            $s4 = array($s4, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseAggSetting();
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c6,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseAggSetting() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseField();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSEP();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseValue();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c199,$s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseTransactionCommand() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 11, "UTF-8") === $this->peg_c200) {
        $s1 = $this->peg_c200;
        $this->peg_currPos += 11;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c201); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c175) {
            $s3 = $this->peg_c175;
            $this->peg_currPos += 5;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c176); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseSEP();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseField();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c202,$s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();
    $this->input = $input;
    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = $this->peg_FAILED;
    $this->peg_c1 = null;
    $this->peg_c2 = array();
    $this->peg_c3 = "|";
    $this->peg_c4 = array( "type" => "literal", "value" => "|", "description" => "\"|\"" );
    $this->peg_c5 = function($settings,$first,$rest) {
        return [
          isset($settings) ? $settings[0]:[],
          Util::combine($first, $rest, 3)
        ];
      };
    $this->peg_c6 = function($first,$rest) {
        return Util::assoc($first, $rest, 1);
      };
    $this->peg_c7 = "$";
    $this->peg_c8 = array( "type" => "literal", "value" => "$", "description" => "\"$\"" );
    $this->peg_c9 = "date_field";
    $this->peg_c10 = array( "type" => "literal", "value" => "date_field", "description" => "\"date_field\"" );
    $this->peg_c11 = function($key,$val) { return [$key, $val]; };
    $this->peg_c12 = "to";
    $this->peg_c13 = array( "type" => "literal", "value" => "to", "description" => "\"to\"" );
    $this->peg_c14 = "from";
    $this->peg_c15 = array( "type" => "literal", "value" => "from", "description" => "\"from\"" );
    $this->peg_c16 = "size";
    $this->peg_c17 = array( "type" => "literal", "value" => "size", "description" => "\"size\"" );
    $this->peg_c18 = "flatten";
    $this->peg_c19 = array( "type" => "literal", "value" => "flatten", "description" => "\"flatten\"" );
    $this->peg_c20 = "sort";
    $this->peg_c21 = array( "type" => "literal", "value" => "sort", "description" => "\"sort\"" );
    $this->peg_c22 = "[";
    $this->peg_c23 = array( "type" => "literal", "value" => "[", "description" => "\"[\"" );
    $this->peg_c24 = "]";
    $this->peg_c25 = array( "type" => "literal", "value" => "]", "description" => "\"]\"" );
    $this->peg_c26 = "fields";
    $this->peg_c27 = array( "type" => "literal", "value" => "fields", "description" => "\"fields\"" );
    $this->peg_c28 = function($key,$first,$rest) { return [$key, Util::combine($first, $rest, 1)]; };
    $this->peg_c29 = "map";
    $this->peg_c30 = array( "type" => "literal", "value" => "map", "description" => "\"map\"" );
    $this->peg_c31 = function($ret) { return $ret; };
    $this->peg_c32 = ",";
    $this->peg_c33 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c34 = function($first,$rest) { return Util::assoc($first, $rest, 3); };
    $this->peg_c35 = function($field,$new_field) { return [$field, $new_field[1]]; };
    $this->peg_c36 = function($first,$rest) { return Util::combine($first, $rest, 3); };
    $this->peg_c37 = function($field,$order) { return [$field, isset($order) ? $order[1]:0]; };
    $this->peg_c38 = "/^[0-9a-zA-Z|\\/+-]/";
    $this->peg_c39 = array( "type" => "class", "value" => "[0-9a-zA-Z|\\/+\\-]", "description" => "[0-9a-zA-Z|\\/+\\-]" );
    $this->peg_c40 = "ASC";
    $this->peg_c41 = array( "type" => "literal", "value" => "ASC", "description" => "\"ASC\"" );
    $this->peg_c42 = function() { return 0; };
    $this->peg_c43 = "DESC";
    $this->peg_c44 = array( "type" => "literal", "value" => "DESC", "description" => "\"DESC\"" );
    $this->peg_c45 = function() { return 1; };
    $this->peg_c46 = ":";
    $this->peg_c47 = array( "type" => "literal", "value" => ":", "description" => "\":\"" );
    $this->peg_c48 = array("type" => "other", "description" => "WhitespaceOrComment" );
    $this->peg_c49 = "#";
    $this->peg_c50 = array( "type" => "literal", "value" => "#", "description" => "\"#\"" );
    $this->peg_c51 = "/^[^\\r\\n]/";
    $this->peg_c52 = array( "type" => "class", "value" => "[^\\r\\n]", "description" => "[^\\r\\n]" );
    $this->peg_c53 = "/^[ \\t\\n\\r]/";
    $this->peg_c54 = array( "type" => "class", "value" => "[ \\t\\n\\r]", "description" => "[ \\t\\n\\r]" );
    $this->peg_c55 = "/^[a-zA-Z0-9._-]/";
    $this->peg_c56 = array( "type" => "class", "value" => "[a-zA-Z0-9._\\-]", "description" => "[a-zA-Z0-9._\\-]" );
    $this->peg_c57 = "true";
    $this->peg_c58 = array( "type" => "literal", "value" => "true", "description" => "\"true\"" );
    $this->peg_c59 = function() { return true; };
    $this->peg_c60 = "false";
    $this->peg_c61 = array( "type" => "literal", "value" => "false", "description" => "\"false\"" );
    $this->peg_c62 = function() { return false; };
    $this->peg_c63 = "/^[0-9]/";
    $this->peg_c64 = array( "type" => "class", "value" => "[0-9]", "description" => "[0-9]" );
    $this->peg_c65 = function($num) { return intval(implode('', $num)); };
    $this->peg_c66 = "\"";
    $this->peg_c67 = array( "type" => "literal", "value" => "\"", "description" => "\"\\\"\"" );
    $this->peg_c68 = function($chrs) { return [[implode('', $chrs)], false]; };
    $this->peg_c69 = "'";
    $this->peg_c70 = array( "type" => "literal", "value" => "'", "description" => "\"'\"" );
    $this->peg_c71 = "NOT";
    $this->peg_c72 = array( "type" => "literal", "value" => "NOT", "description" => "\"NOT\"" );
    $this->peg_c73 = "AND";
    $this->peg_c74 = array( "type" => "literal", "value" => "AND", "description" => "\"AND\"" );
    $this->peg_c75 = "OR";
    $this->peg_c76 = array( "type" => "literal", "value" => "OR", "description" => "\"OR\"" );
    $this->peg_c77 = function($chunks) { return [$chunks, true]; };
    $this->peg_c78 = "*";
    $this->peg_c79 = array( "type" => "literal", "value" => "*", "description" => "\"*\"" );
    $this->peg_c80 = function() { return Token::W_STAR; };
    $this->peg_c81 = "?";
    $this->peg_c82 = array( "type" => "literal", "value" => "?", "description" => "\"?\"" );
    $this->peg_c83 = function() { return Token::W_QMARK; };
    $this->peg_c84 = function($chrs) { return implode('', $chrs); };
    $this->peg_c85 = "\\";
    $this->peg_c86 = array( "type" => "literal", "value" => "\\", "description" => "\"\\\\\"" );
    $this->peg_c87 = function($chr) { return $chr; };
    $this->peg_c88 = array("type" => "any", "description" => "any character" );
    $this->peg_c89 = "\\\"";
    $this->peg_c90 = array( "type" => "literal", "value" => "\\\"", "description" => "\"\\\\\\\"\"" );
    $this->peg_c91 = function() { return '"'; };
    $this->peg_c92 = "/^[^\"]/";
    $this->peg_c93 = array( "type" => "class", "value" => "[^\"]", "description" => "[^\"]" );
    $this->peg_c94 = "\\'";
    $this->peg_c95 = array( "type" => "literal", "value" => "\\'", "description" => "\"\\\\'\"" );
    $this->peg_c96 = function() { return "'"; };
    $this->peg_c97 = "/^[^']/";
    $this->peg_c98 = array( "type" => "class", "value" => "[^']", "description" => "[^']" );
    $this->peg_c99 = function($chr) { return $chr[0]; };
    $this->peg_c100 = "(";
    $this->peg_c101 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c102 = ")";
    $this->peg_c103 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c104 = "{";
    $this->peg_c105 = array( "type" => "literal", "value" => "{", "description" => "\"{\"" );
    $this->peg_c106 = "}";
    $this->peg_c107 = array( "type" => "literal", "value" => "}", "description" => "\"}\"" );
    $this->peg_c108 = "+";
    $this->peg_c109 = array( "type" => "literal", "value" => "+", "description" => "\"+\"" );
    $this->peg_c110 = "-";
    $this->peg_c111 = array( "type" => "literal", "value" => "-", "description" => "\"-\"" );
    $this->peg_c112 = "/";
    $this->peg_c113 = array( "type" => "literal", "value" => "/", "description" => "\"/\"" );
    $this->peg_c114 = "@";
    $this->peg_c115 = array( "type" => "literal", "value" => "@", "description" => "\"@\"" );
    $this->peg_c116 = "^";
    $this->peg_c117 = array( "type" => "literal", "value" => "^", "description" => "\"^\"" );
    $this->peg_c118 = "\\n";
    $this->peg_c119 = array( "type" => "literal", "value" => "\\n", "description" => "\"\\\\n\"" );
    $this->peg_c120 = function() { return "\n"; };
    $this->peg_c121 = "\\r";
    $this->peg_c122 = array( "type" => "literal", "value" => "\\r", "description" => "\"\\\\r\"" );
    $this->peg_c123 = function() { return "\r"; };
    $this->peg_c124 = "\\t";
    $this->peg_c125 = array( "type" => "literal", "value" => "\\t", "description" => "\"\\\\t\"" );
    $this->peg_c126 = function() { return "\t"; };
    $this->peg_c127 = function($query) { return [Token::C_SEARCH, $query]; };
    $this->peg_c128 = function() { return [Token::C_SEARCH, []]; };
    $this->peg_c129 = function($a,$b) {
        if(isset($b) && count($b)) {
          return [Token::F_OR, Util::combine($a, $b, 3)];
        }
        return $a;
      };
    $this->peg_c130 = function($a,$b) {
        if(isset($b) && count($b)) {
          return [Token::F_AND, Util::combine($a, $b, 2)];
        }
        return $a;
      };
    $this->peg_c131 = function($a,$b) {
        if(isset($b) && count($b)) {
          return [Token::F_AND, [$a, [Token::F_NOT, $b[4]]]];
        }
        return $a;
      };
    $this->peg_c132 = function($neg,$expr) {
        if($neg) {
          return [Token::F_NOT, $expr];
        }
        return $expr;
      };
    $this->peg_c133 = function($neg,$clause) {
        if($neg) {
          $clause = [Token::F_NOT, $clause];
        }
        return $clause;
      };
    $this->peg_c134 = "_exists_";
    $this->peg_c135 = array( "type" => "literal", "value" => "_exists_", "description" => "\"_exists_\"" );
    $this->peg_c136 = function($field) { return [Token::F_EXISTS, $field]; };
    $this->peg_c137 = function() { $this->error('Invalid field'); };
    $this->peg_c138 = "_missing_";
    $this->peg_c139 = array( "type" => "literal", "value" => "_missing_", "description" => "\"_missing_\"" );
    $this->peg_c140 = function($field) { return [Token::F_MISSING, $field]; };
    $this->peg_c141 = "TO";
    $this->peg_c142 = array( "type" => "literal", "value" => "TO", "description" => "\"TO\"" );
    $this->peg_c143 = function($lo,$hi,$b) { return [$b == ']', $lo, $hi]; };
    $this->peg_c144 = function() { $this->error('Invalid range'); };
    $this->peg_c145 = function($field,$a,$ret) { return array_merge([Token::F_RANGE, $field, $a == '['], $ret); };
    $this->peg_c146 = function($val) { return [$val]; };
    $this->peg_c147 = function() { $this->error('Invalid prefix'); };
    $this->peg_c148 = function($field,$ret) { return array_merge([Token::F_PREFIX, $field], $ret); };
    $this->peg_c149 = function($regex) { return [$regex]; };
    $this->peg_c150 = function() { $this->error('Invalid regex'); };
    $this->peg_c151 = function($field,$ret) { return array_merge([Token::F_REGEX, $field], $ret); };
    $this->peg_c152 = function($first,$rest) { return [Util::combine($first, $rest, 2)]; };
    $this->peg_c153 = function() { $this->error('Invalid list'); };
    $this->peg_c154 = function($field,$ret) { return array_merge([Token::X_LIST, $field], $ret, [true]); };
    $this->peg_c155 = function($list) { return [$list]; };
    $this->peg_c156 = function() { $this->error('Invalid list name'); };
    $this->peg_c157 = function($field,$esc,$ret) { return array_merge([Token::X_LIST, $field], $ret, [$esc[1] == '@']); };
    $this->peg_c158 = function($field,$val) { return [Token::Q_QUERYSTRING, $field, $val]; };
    $this->peg_c159 = function($val) { return [Token::Q_QUERYSTRING, null, $val]; };
    $this->peg_c160 = "\\/";
    $this->peg_c161 = array( "type" => "literal", "value" => "\\/", "description" => "\"\\\\/\"" );
    $this->peg_c162 = function() { return '/'; };
    $this->peg_c163 = "/^[^\\/]/";
    $this->peg_c164 = array( "type" => "class", "value" => "[^\\/]", "description" => "[^\\/]" );
    $this->peg_c165 = function() { return null; };
    $this->peg_c166 = "join";
    $this->peg_c167 = array( "type" => "literal", "value" => "join", "description" => "\"join\"" );
    $this->peg_c168 = "source_field";
    $this->peg_c169 = array( "type" => "literal", "value" => "source_field", "description" => "\"source_field\"" );
    $this->peg_c170 = "target_field";
    $this->peg_c171 = array( "type" => "literal", "value" => "target_field", "description" => "\"target_field\"" );
    $this->peg_c172 = function($source,$target,$query) {
        return [Token::C_JOIN, $source, $target, isset($query) ? $query[1]:[]];
      };
    $this->peg_c173 = "agg";
    $this->peg_c174 = array( "type" => "literal", "value" => "agg", "description" => "\"agg\"" );
    $this->peg_c175 = "field";
    $this->peg_c176 = array( "type" => "literal", "value" => "field", "description" => "\"field\"" );
    $this->peg_c177 = function($type,$field,$settings) {
        return [Token::C_AGG, $type, $field, isset($settings) ? $settings[1]:[]];
      };
    $this->peg_c178 = "terms";
    $this->peg_c179 = array( "type" => "literal", "value" => "terms", "description" => "\"terms\"" );
    $this->peg_c180 = function() { return Token::A_TERMS; };
    $this->peg_c181 = "sigterms";
    $this->peg_c182 = array( "type" => "literal", "value" => "sigterms", "description" => "\"sigterms\"" );
    $this->peg_c183 = function() { return Token::A_SIGTERMS; };
    $this->peg_c184 = "card";
    $this->peg_c185 = array( "type" => "literal", "value" => "card", "description" => "\"card\"" );
    $this->peg_c186 = function() { return Token::A_CARD; };
    $this->peg_c187 = "min";
    $this->peg_c188 = array( "type" => "literal", "value" => "min", "description" => "\"min\"" );
    $this->peg_c189 = function() { return Token::A_MIN; };
    $this->peg_c190 = "max";
    $this->peg_c191 = array( "type" => "literal", "value" => "max", "description" => "\"max\"" );
    $this->peg_c192 = function() { return Token::A_MAX; };
    $this->peg_c193 = "avg";
    $this->peg_c194 = array( "type" => "literal", "value" => "avg", "description" => "\"avg\"" );
    $this->peg_c195 = function() { return Token::A_AVG; };
    $this->peg_c196 = "sum";
    $this->peg_c197 = array( "type" => "literal", "value" => "sum", "description" => "\"sum\"" );
    $this->peg_c198 = function() { return Token::A_SUM; };
    $this->peg_c199 = function($field,$val) { return [$field, is_numeric($val) ? (float)$val:$val]; };
    $this->peg_c200 = "transaction";
    $this->peg_c201 = array( "type" => "literal", "value" => "transaction", "description" => "\"transaction\"" );
    $this->peg_c202 = function($field) { return [Token::C_TRANS, $field]; };

    $peg_startRuleFunctions = array( 'Root' => array($this, "peg_parseRoot") );
    $peg_startRuleFunction  = array($this, "peg_parseRoot");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }
    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);
    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === mb_strlen($input, "UTF-8")) {
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < mb_strlen($input, "UTF-8")) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      throw $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
    }
  }

};
